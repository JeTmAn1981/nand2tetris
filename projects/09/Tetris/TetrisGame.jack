// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Tetris/TetrisGame.jack

/**
 * Implements the Tetris game.
 * In this game you can move a black Tetris around the screen and
 * change its size during the movement.
 * In the beginning, the Tetris is located at the top-left corner
 * of the screen. The arrow keys are used to move the Tetris.
 * The 'z' & 'x' keys are used to decrement and increment the size.
 * The 'q' key is used to quit the game.
 */
class TetrisGame {

    // The Tetris
    field Tetrimino CurrentTetrimino;

    // The Tetris's movement direction
    field int direction, downTimer; // 0=none,1=up,2=down,3=left,4=right
	
	
    /** Constructs a new Tetris Game. */
    constructor TetrisGame new() {
       do checkNewTetrimino();
		       
	   let direction = 0;

	   //do drawBorders();
			
       return this;
    }

	method void drawBorders()
	{
		do Screen.drawRectangle(10, 0, 200,10);
		do Screen.drawRectangle(310, 0, 500,10);
		do Screen.drawRectangle(10, 244, 500,254);
		do Screen.drawRectangle(0, 0, 10,254);
		do Screen.drawRectangle(500, 0, 510,254);
		
		return;
	}
	
	
    /** Deallocates the object's memory. */
    method void dispose() {
        do CurrentTetrimino.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the Tetris's movement, direction and size. */
    method void run() {
	var char key;
    var int tetriminoPosition;
	
	let downTimer = 0;
	
	 while (true)
	 {		
			while (key = 0) {
				do checkNewTetrimino();
                let key = Keyboard.keyPressed();
				
				do checkDownTimer();
		    }

			let direction = 0;
			
			if (key = 131) {
                let direction = 1;
            }
            if (key = 133) {
                let direction = 2;
            }
            if (key = 130) {
                let direction = 3;
            }
            if (key = 132) {
                let direction = 4;
            }

			// waits for the key to be released.
            while (~(key = 0)) {
				do checkNewTetrimino();
                let key = Keyboard.keyPressed();
                //do moveTetrimino();
				//do CurrentTetrimino.moveDown();
				//do Sys.wait(40);
				do checkDownTimer();
			}
			
			do moveTetrimino();
			
			
	 }
	 
        return;
	}
	
	method void checkDownTimer()
	{
		//do Output.printInt(downTimer);
		if (~(downTimer < 5000))
		{
			do CurrentTetrimino.moveDown();
			let downTimer = 0;
		}
		else
		{
			let downTimer = downTimer + 1;
		}
	
		return;
	}
	
	method void checkNewTetrimino()
	{
		
			if (CurrentTetrimino = null)
			{
			   let CurrentTetrimino = Tetrimino.new(240, 0, 10);
			}
			
			if (CurrentTetrimino.getPosition() > 241)
			{
			let CurrentTetrimino = Tetrimino.new(240, 0, 10);
			}
			
			return;
	}
	
	
    /** Moves the Tetris by 2 pixels in the current direction. */
    method void moveTetrimino() {
        if (direction = 1) {
            do CurrentTetrimino.nextState();
	    }
        if (direction = 2) {
            do CurrentTetrimino.moveDown();
        }
        if (direction = 3) {
            do CurrentTetrimino.moveLeft();
        }
        if (direction = 4) {
            do CurrentTetrimino.moveRight();
        }

        // // Delays the next movement.
        return;
    }
}
