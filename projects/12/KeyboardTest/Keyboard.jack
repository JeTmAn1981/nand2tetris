// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
	static int KEYBOARD;

    /** Initializes the keyboard. */
    function void init() {
	 let KEYBOARD = 24576;
	 return;
    } 

    /**
     * Returns the ASCII code (as char) of the currently pressed key,
     * or 0 if no key is currently pressed.
     * Recognizes all ASCII characters, as well as the following extension
     * of action keys:
     * New line = 128 = String.newline()
     * Backspace = 129 = String.backspace()
     * Left Arrow = 130
     * Up Arrow = 131
     * Right Arrow = 132
     * Down Arrow = 133
     * Home = 134
     * End = 135
     * Page Up = 136
     * Page Down = 137
     * Insert = 138
     * Delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
		return Memory.peek(KEYBOARD);
    }

    /**								
     * Reads the next character from the keyboard.
     * waits until a key is pressed and then released, then echoes
     * the key to the screen, and returns the value of the pressed key.
     */
    function char readChar() {
	var char key, pressedkey;
	
	
	let key = Keyboard.keyPressed();
	
	while (key = 0) 
	{	
		let key = Keyboard.keyPressed();
	}
	
	let pressedkey = key;
	
	while (~(key = 0))
	{ 
		let key = Keyboard.keyPressed();
	}
	
	do Output.printChar(pressedkey);
	
	return pressedkey;
    }

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its value.
     */
    function String readLine(String message) {
	var char key, pressedkey;
	var String input, inputcopy;
	var int stringmax,counter;
	var boolean loop;
	
	let loop = true;
	let stringmax = 1;
	let input = String.new(stringmax);
	
	do Output.printString(message);
	do Output.printChar(0);
	
	let key = Keyboard.keyPressed();
	
	while (loop)
	{
		while (key = 0)
		{
			let key = Keyboard.keyPressed();
		}
		
		let pressedkey = key;
		
		while (~(key = 0))
		{
			let key = Keyboard.keyPressed();
		}
		
		if (pressedkey = 128) {	let loop = false;}
		else
		{
			if (key = 129) 
			{ 
				do Output.backspace();	
				
				if ((input.length() - 1) < (stringmax / 2))
				{
					let input = Keyboard.updateStringSize(input,stringmax);
				}
				
				do input.eraseLastChar();
			}
			else 
			{ 
				do Output.printChar(pressedkey); 
								
				if ((input.length() + 1) = stringmax)
				{
					let stringmax = stringmax * 2;
					let input = Keyboard.updateStringSize(input,stringmax);
				}
				
				do input.appendChar(pressedkey);
			}
		}
	}
	
	do Output.println();
	
	return input;
    }   
	
	function String updateStringSize(String target, int size)
	{
		var String stringcopy;
		var int counter;
		
		let stringcopy = String.new(size);
		
		let counter = 0;

		while (counter < target.length())
		{
			do stringcopy.appendChar(target.charAt(counter));
			let counter = counter + 1;
		}
		
		do target.dispose();
		let target = stringcopy;

		return target;
	}

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its
     * integer value (until the first non numeric character).
     */
    function int readInt(String message) {
	var char key, pressedkey;
	var String input, inputcopy;
	var int stringmax,counter;
	var boolean loop;
	
	let loop = true;
	let stringmax = 1;
	let input = String.new(stringmax);
	
	do Output.printString(message);
	do Output.printChar(0);
	
	let key = Keyboard.keyPressed();
	
	while (loop)
	{
		while (key = 0)
		{
			let key = Keyboard.keyPressed();
		}
		
		let pressedkey = key;
		
		while (~(key = 0))
		{
			let key = Keyboard.keyPressed();
		}
		
		if (pressedkey = 128) {	let loop = false;}
		else
		{
			if (key = 129) 
			{ 
				do Output.backspace();	
				
				if ((input.length() - 1) < (stringmax / 2))
				{
					let input = Keyboard.updateStringSize(input,stringmax);
				}
				
				do input.eraseLastChar();
			}
			else 
			{ 
				do Output.printChar(pressedkey); 
								
				if ((input.length() + 1) = stringmax)
				{
					let stringmax = stringmax * 2;
					let input = Keyboard.updateStringSize(input,stringmax);
				}
				
				do input.appendChar(pressedkey);
			}
		}
	}
	
	do Output.println();
	
	return input.intValue();
    }
}
