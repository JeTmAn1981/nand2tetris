// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    static Array twopowers; 
	static int divideremainder;

    /** Initializes the library. */
    function void init() {
	var int i, n;
	
	let twopowers = Array.new(16);
	let i = 0;
	let n = 1;
	
	while (i < 15)
	{
	let twopowers[i] = n;
    	
	let i = i + 1;
	let n = n+n;
	
	}
	
	return; 
	}
	
	function int divide(int dividend, int divisor)
	{
		var int quotient, negative, sum;
		
		let negative = 0;
		
		if (((dividend < 0) & (divisor > -1)) | ((divisor < 0) & (dividend > -1)) )
		{
			let negative = 1;
		}
		
		let dividend = Math.abs(dividend);
		let divisor = Math.abs(divisor);
		
		if (divisor > dividend)
		{
			let divideremainder = divisor - dividend;
			return 0;
		}
		
		if (divisor = dividend)
		{
			if (negative = 1)
			{
				return -1;
			}
			else
			{
				return 1;
			}
		}
		
		let sum = divisor;
		let quotient = 1;
		
		while (((sum + divisor) < (32766)) & ((sum + divisor - 1) < (dividend)))
		{
			if (sum > 32720)
			{
			
			}
			let sum = sum + divisor;
			let quotient = quotient + 1;
			
		}
		
		let divideremainder = dividend - sum;
		
		if (negative = 1)
			{
				return -quotient;
			}
			else
			{
				return quotient;
			}
	}
	
	function int getDivideRemainder()
	{
		return divideremainder;
	}
	
	function int mod(int dividend, int divisor)
	{
		do Math.divide(dividend,divisor);
	
		return divideremainder;
	}

    /** Returns the absolute value of x. */
    function int abs(int x) {
    if (x < 0)
	{	
		return -x;
	}	
	
	return x;
	}

	 

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
	var int bitcounter, sum, shiftedX, mask;
	var boolean returnnegative;
	
	let mask = 1;
	let returnnegative = false;
	
	if (x = 1)
	{
	return y;
	}
	
	if (y = 1)
	{
	return x;
	}
	
	if ((x = 0) | (y = 0)) { return 0;}
	
	if ((x < 0 & y > 0) | (y < 0 & x > 0)) {	let returnnegative = true;}
	
	let x = Math.abs(x);
	let y = Math.abs(y);

	let shiftedX = x;
	
	while (bitcounter < 15)
	{
		
		if (~((y & mask) = 0))	{ 
		
		let sum = sum + shiftedX; }
	
		let shiftedX = shiftedX + shiftedX;	
		let bitcounter = bitcounter + 1;
		let mask = mask + mask;
	}
	
	if (returnnegative) { return -sum;}
	else { return sum;}
	
	}
	
	function int bit(int value, int position)
	{
		
		var int mask;
		
		let mask = twopowers[position];
		
		if (~((value & mask) = 0))
		{
			return 1;
		}
		
		return 0;
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
   var int y,j,z,p;
	let j=7;
	while(~(j<0)){
		let z=twopowers[j]+y;
		let p=z*z;
		if(~((p>x)|(z<0)|(p<0))){
			let y=twopowers[j]+y;
		}
		let j=j-1;
	}
	return y;
	}
	
	function int exp(int value, int power)
	{
		var int originalValue;
		
		let originalValue = value;
	
		if (power < 1)
		{
			return 1;
		}
	
		while (power > 1)
		{
			let value = value * originalValue;
			let power = power - 1;
		}
		
		return value;
	}
	
    /** Returns the greater number. */
    function int max(int a, int b) 
	{
		if (a > b)
			{
				return a;	
			}
	
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    	if (a < b)
			{
				return a;	
			}
	
		return b; 
	}
}
