// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
 
class Screen {
	static Array screenbase;
	static int color;
	
    /** Initializes the Screen. */
    function void init() {
	let screenbase = 16384;
	let color = -1;
	
	return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
    
	return;
	}

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
    if (b)
	{
	let color = -1;
	}
	else
	{
	let color = 0;
	}
	
	return;
	}

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
	var int horizontaloffset, pixelposition, address, sum;
	
	while ((sum + 15) < x)
	{
	let horizontaloffset = horizontaloffset + 1;
	let sum = sum + 16;
	}
	
	let pixelposition = x - sum;
	
	let address = screenbase + (32 * y) + horizontaloffset;
	
	//do Screen.printval("address: ", address);
	//do Screen.printval("address value: ", Memory.peek(address));
	//do Screen.printval("horizontal offset: ", horizontaloffset);
	//do Screen.printval("pixel position: ", pixelposition);
	
	do Memory.poke(address, Screen.togglepixelposition(Memory.peek(address),pixelposition));
	
	//do Screen.printval("address: ", address);
	//do Screen.printval("address value: ", Memory.peek(address));
	//do Output.println();
	
	return;
    }

	
	function void printval(String label, int value)
	{
		do Output.printString(label);
		do Output.printInt(value);
		do Output.println();
	
		return;
	}
	
	function int togglepixelposition(int value, int pixelposition) {
    	var int mask, position, sum;
    	var boolean loop;
    	
    	let loop = true;
		let sum = 0;
		let mask = 1;
 
    	while (loop) {
    	   
    	    if (~(position > 15)) {
			if (position = pixelposition)
					{
						if (color = -1)
						{
						let sum = sum + mask;
						}
					}
				else
				{
				if (~((value & mask) = 0)) 
				{
					let sum = sum + mask;
				}
					
				}
    	    }
    	    else {
    	        let loop = false;
    	    }
			
			 let position = position + 1;
     	     let mask = mask + mask;
        
    	}
    
//		do Output.println();	
	//	do Output.printInt(sum);
		//do Output.println();	
    	return sum;
    }
 
    
	function void drawLine(int x,int y,int x2, int y2) {
    var int w, h, dx1, dy1, dx2, dy2, longest, shortest, numerator, counter;
	
	let w = x2 - x;
    let h = y2 - y;
    
    if (w<0) 
	{
		let dx1 = -1 ; 
	}
	else
	{
		if (w>0) 
		{
			let dx1 = 1 ;
		}
	}	
    if (h<0)
	{
	let dy1 = -1; 
	}
	else
	{
		if (h>0) 
		{
		let dy1 = 1;
		}
	}	
	
    if (w<0) 
	{
		let dx2 = -1 ; 
	}
	else 
	{
		if (w>0) 
		{
			let dx2 = 1;
		}
	}
	
    let longest = Math.abs(w) ;
    let shortest = Math.abs(h) ;
	
    if (~(longest>shortest)) {
        let longest = Math.abs(h);
        let shortest = Math.abs(w);

        if (h<0) 
		{
			let dy2 = -1;
		}
		else 
		{
			if (h>0) 
			{
				let dy2 = 1;
			}
     	}
		
		let dx2 = 0 ;            
    }
	
    let numerator = Screen.bitshiftRight(longest);
	
	while(counter < (longest + 1))
	{
		do Screen.drawPixel(x,y);
        let numerator = numerator + shortest;
        
		if (~(numerator<longest)) {
            let numerator = numerator - longest;
            let x = x + dx1 ;
            let y = y + dy1 ;
        } else {
            let x = x + dx2 ;
            let y = y + dy2 ;
        }
		
		let counter = counter + 1;
	}
	
	return;
}

function int bitshiftRight(int value)
{
    	var int mask, sum, counter;
    	
		let sum = 0;
		let mask = 1;
 
 while (counter < 15)
 {
    if (~((value) & (mask + mask)) = 0)
	{
		let sum = sum + mask;
	}
 
	let mask = mask + mask;
	let counter = counter + 1;
 }
 
    if (~((value) & (mask + mask)) = 0)
	{
		return -sum;
	}
	else
	{
		return sum;
	}
 	
    }
 
	/** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	var int currentY;
	
	let currentY = y1;
	
	while (currentY < y2)
	{
		do Screen.drawLine(x1,currentY,x2,currentY);
		let currentY = currentY + 1;
	}
	
	do Screen.drawLine(x1,currentY,x2,currentY);
	
	
	return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int x, int y, int r) {
	var int dy, squaresegment;
	
	let dy = -r;
	
	while (~(dy = r))
	{
		let squaresegment = Math.sqrt((r * r) - (dy * dy));
		
		do Screen.drawLine((x - squaresegment), (y + dy),(x + squaresegment),(y+dy));
		
		let dy = dy + 1;
	}
	
	let squaresegment = Math.sqrt((r * r) - (dy * dy));
		
	do Screen.drawLine((x - squaresegment), (y + dy),(x + squaresegment),(y+dy));
		
	
	return;
    }
}
