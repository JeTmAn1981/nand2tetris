function Math.init 2
push constant 16
call Array.new 1
pop static 0
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE_EXP0
push local 0
push constant 15
lt
not
if-goto WHILE_END0
push local 0
push static 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
push local 1
push local 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Math.divide 3
push constant 0
pop local 1
push argument 0
push constant 0
lt
push argument 1
push constant 1
neg
gt
and
push argument 1
push constant 0
lt
push argument 0
push constant 1
neg
gt
and
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 1
label IF_FALSE0
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
push argument 0
sub
pop static 1
push constant 0
return
label IF_FALSE1
push argument 1
push argument 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 1
push constant 1
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
neg
return
goto IF_END3
label IF_FALSE3
push constant 1
return
label IF_END3
label IF_FALSE2
push argument 1
pop local 2
push constant 1
pop local 0
label WHILE_EXP0
push local 2
push argument 1
add
push constant 32766
lt
push local 2
push argument 1
add
push constant 1
sub
push argument 0
lt
and
not
if-goto WHILE_END0
push local 2
push constant 32720
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 6
call String.new 1
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 61
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 2
call Output.printInt 1
pop temp 0
push constant 13
call String.new 1
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 113
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 61
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 0
call Output.printInt 1
pop temp 0
push constant 13
call String.new 1
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 118
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 61
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push argument 0
call Output.printInt 1
pop temp 0
call Output.println 0
pop temp 0
label IF_FALSE4
push local 2
push argument 1
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 6
call String.new 1
push constant 115
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 109
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 61
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 2
call Output.printInt 1
pop temp 0
push constant 13
call String.new 1
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 113
call String.appendChar 2
push constant 117
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 61
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push local 0
call Output.printInt 1
pop temp 0
push constant 13
call String.new 1
push constant 44
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 118
call String.appendChar 2
push constant 105
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 101
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 100
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 61
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push argument 0
call Output.printInt 1
pop temp 0
call Output.println 0
pop temp 0
push argument 0
push local 2
sub
pop static 1
push local 1
push constant 1
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push local 0
neg
return
goto IF_END5
label IF_FALSE5
push local 0
return
label IF_END5
function Math.getDivideRemainder 0
push static 1
return
function Math.mod 0
push argument 0
push argument 1
call Math.divide 2
pop temp 0
push static 1
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
push argument 0
push constant 2
call Math.multiply 2
sub
return
label IF_FALSE0
push argument 0
return
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 2
push constant 0
pop local 1
push argument 0
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
return
label IF_FALSE0
push argument 1
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
return
label IF_FALSE1
label WHILE_EXP0
push local 0
push constant 15
lt
not
if-goto WHILE_END0
push argument 1
push local 0
call Math.bit 2
push constant 0
eq
not
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 1
push local 2
add
pop local 1
label IF_FALSE2
push local 2
push local 2
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 1
return
function Math.bit 1
push argument 1
push static 0
add
pop pointer 1
push that 0
pop local 0
push argument 0
push local 0
and
push constant 0
eq
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
return
label IF_FALSE0
push constant 0
return
function Math.sqrt 4
push constant 7
pop local 1
label WHILE_EXP0
push local 1
push constant 0
lt
not
not
if-goto WHILE_END0
push local 1
push static 0
add
pop pointer 1
push that 0
push local 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
push local 2
push constant 0
lt
or
push local 3
push constant 0
lt
or
not
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 1
push static 0
add
pop pointer 1
push that 0
push local 0
add
pop local 0
label IF_FALSE0
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Math.exp 1
push argument 0
pop local 0
push argument 1
push constant 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
return
label IF_FALSE0
label WHILE_EXP0
push argument 1
push constant 1
gt
not
if-goto WHILE_END0
push argument 0
push local 0
call Math.multiply 2
pop argument 0
push argument 1
push constant 1
sub
pop argument 1
goto WHILE_EXP0
label WHILE_END0
push argument 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 0
return
label IF_FALSE0
push argument 1
return
