// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	
	// Optionally set X to zero
	Mux16(a = x, b[0..15] = false, sel = zx, out = zerox);
	
	// Collect flipped bit value of X for use if negation is selected
	Not16(in = zerox, out = notx);
	//Mux16(a = zerox, b = notx, sel = nx, out = notx2);
	
	// Select either zero or one to add to potentially flipped bit value of X if negation is selected.
	//Mux16(a[0..15] = false, b[0] = true, sel = nx, out = addtox);
	
	// Add previously selected value to X.  If negation is selected, this will be the flipped value and the final
	// value will be the negation of the original X.  If negation is not selected, 0 will be added and no change will
	// be made to the original value of X.
	//Add16(a = notx2, b = addtox, out = processedx);
    Mux16(a = zerox, b = notx, sel = nx, out = processedx);
	
	// Optionally set y to zero
	Mux16(a = y, b[0..15] = false, sel = zy, out = zeroy);
	
	// Collect flipped bit value of y for use if negation is selected
	Not16(in = zeroy, out = noty);
	//Mux16(a = zeroy, b = noty, sel = ny, out = noty2);
	
	// Select either zero or one to add to potentially flipped bit value of y if negation is selected.
	//Mux16(a[0..15] = false, b[0] = true, sel = ny, out = addtoy);
	
	// Add previously selected value to y.  If negation is selected, this will be the flipped value and the final
	// value will be the negation of the original y.  If negation is not selected, 0 will be added and no change will
	// be made to the original value of y.
	//Add16(a = noty2, b = addtoy, out = processedy);
    Mux16(a = zeroy, b = noty, sel = ny, out = processedy);
	
	// Perform both And and Add operations on x and y, then mux the result with the function bit to produce the value after the function
	Add16(a = processedx, b = processedy, out = xyadded);
	And16(a = processedx, b = processedy, out = xyanded);
	Mux16(a = xyanded, b = xyadded, sel = f, out = functionresult);
	
	Not16(in = functionresult, out = notfunctionresult);
	Mux16(a = functionresult, b = notfunctionresult, sel = no, out = out, out[0..7] = outpart1, out[8..15] = outpart2, out[15] = outng);

	
	Or8Way(in = outpart1, out = firstor);
	Or8Way(in = outpart2, out = secondor);
	Or(a = firstor, b = secondor, out = finalor);
	Not(in = finalor, out = zr);
	
	And(a = outng, b = true, out = ng);
}